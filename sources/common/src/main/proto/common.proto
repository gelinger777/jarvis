syntax = "proto3";
option java_multiple_files = true;
option java_outer_classname = "ProtobufCommon";


package proto.common;

// ---------------------------------------------------------------------------
// service interface
// ---------------------------------------------------------------------------


// Collector service provides interface to record and stream realtime and historical data for a particular exchange
service Collector{

    rpc info(CollInfoReq) returns (CollInfoResp){}

    rpc streamTrades(StreamTradesReq) returns (stream Trade){}
    rpc streamOrders(StreamOrdersReq) returns (stream Order){}

    rpc recordTrades(RecordTradesReq) returns (RecordTradesResp){}
    rpc recordOrders(RecordOrdersReq) returns (RecordOrdersResp){}

    rpc streamHistoricalTrades(StreamHistoricalTradesReq) returns (stream Trade){}
    rpc streamHistoricalOrders(StreamHistoricalOrdersReq) returns (stream Order){}
}

// ---------------------------------------------------------------------------
// request/response types
// ---------------------------------------------------------------------------

message CollInfoReq{
    enum Type {
        ALL = 0;
        ACCESSIBLE_MARKET_PAIRS = 1;
        CURRENT_STREAMS = 2;
        CURRENT_RECORDINGS = 3;
    }
    Type type = 1;
}

message CollInfoResp{
    repeated Pair accessibleMarketPairs = 1;
    repeated Pair activeOrderbookStreams = 2;
    repeated Pair activeStreamTradess = 3;
}

message StreamTradesReq{
    Pair pair = 1;
}


message StreamOrdersReq{
    Pair pair = 1;
}


message RecordTradesReq{
    Pair pair = 1;
}

message RecordTradesResp{
    bool success = 1;
    string error = 2;
}

message RecordOrdersReq{
    Pair pair = 1;
}

message RecordOrdersResp{
    bool success = 1;
    string error = 2;
}

message StreamHistoricalTradesReq{
    Pair pair = 1;
    int64 startIndex = 2;
    int64 endIndex = 3;
}

message StreamHistoricalOrdersReq{
    Pair pair = 1;
    int64 startIndex = 2;
    int64 endIndex = 3;
}

// ---------------------------------------------------------------------------
// base types
// ---------------------------------------------------------------------------

message Currency {
    string symbol = 1;
}

message Pair {
    Currency base = 1;
    Currency quote = 2;
}

// note : Canceled orders shall have same order id but 0 price and 0 volume
message Order {
    enum Side {
        BID = 0;
        ASK = 1;
    }

    int64 time = 1;
    int64 id = 2;
    double price = 3;
    double volume = 4;
    Side side = 5;
}

message Trade {
    int64 time = 1;
    double price = 2;
    double volume = 3;
}


// ---------------------------------------------------------------------------
// configuration types
// ---------------------------------------------------------------------------


message ServiceAddress{
    string host = 1;
    int32 port = 2;
}