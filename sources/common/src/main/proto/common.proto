syntax = "proto2";
option java_multiple_files = true;
option java_outer_classname = "ProtoCommon";


package proto.common;

// ---------------------------------------------------------------------------
// service interface
// ---------------------------------------------------------------------------

// Collector service provides interface to record and stream realtime and historical data for a particular exchange
service Collector {

    rpc info (CollInfoReq) returns (CollInfoResp) {
    }

    rpc recordTrades (RecordTradesReq) returns (RecordTradesResp) {
    }

    rpc recordOrders (RecordOrdersReq) returns (RecordOrdersResp) {
    }
}

// ---------------------------------------------------------------------------
// request/response types
// ---------------------------------------------------------------------------

message CollInfoReq {
}

message CollInfoResp {
    repeated Pair accessibleMarketPairs = 1;
    repeated string currentStreams = 2;
}

message RecordTradesReq {
    required Pair pair = 1;
}

message RecordTradesResp {
    required bool success = 1;
    optional string error = 2;
}

message RecordOrdersReq {
    required Pair pair = 1;
}

message RecordOrdersResp {
    required bool success = 1;
    optional string error = 2;
}

// ---------------------------------------------------------------------------
// base types
// ---------------------------------------------------------------------------

message Currency {
    required string symbol = 1;
}

message Pair {
    required Currency base = 1;
    required Currency quote = 2;
}

message Order {
    enum Side {
        BID = 0;
        ASK = 1;
    }

    required int64 time = 1;
    required double price = 2;
    required double volume = 3;
    required Side side = 4;
}

message Trade {
    required int64 time = 1;
    required double price = 2;
    required double volume = 3;
}

// ---------------------------------------------------------------------------
// indicator types
// ---------------------------------------------------------------------------

message OHLC {
    required double open = 1;
    required double high = 2;
    required double low = 3;
    required double close = 4;
    required double vol = 5;
    required int64 start = 6;
    required int64 end = 7;
}

// simple moving average
message SMA {
    required double price = 1;
    required int64 start = 2;
    required int64 end = 3;
}

// exponential moving average
message EMA {
    required double averagePrice = 1;
    required int64 start = 2;
    required int64 end = 3;
    required bool completed = 4;
}

message MACD {
    required string placeholder = 1 [default = "todo"];
}

// ---------------------------------------------------------------------------
// configuration types
// ---------------------------------------------------------------------------

message ServiceAddress {
    required string host = 1;
    required int32 port = 2;
}