description = "Fully autonomous algorithmic trading environment."

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url 'http://clojars.org/repo' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.1'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.6'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.1.RELEASE'
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
    }
}

// Global =======================================================================================

subprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'

    group = "jarvis" // we don't need the domain

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    repositories {
        mavenCentral()
        mavenLocal()

        maven { url 'http://clojars.org/repo' }
        // open hft snapshots
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }

    dependencies {
        // kotlin
        compile 'org.jetbrains.kotlin:kotlin-stdlib:1.0.1'
        compile "org.jetbrains:annotations:15.0"

        // protobuf
        compile 'com.google.protobuf:protobuf-java:3.0.0-beta-2'
        compile 'io.grpc:grpc-all:0.13.2'

        // rx java
        compile 'io.reactivex:rxjava:1.0.14'

        // java 8 stream utils
        compile 'one.util:streamex:0.5.5'

        // functional
        compile 'com.javaslang:javaslang:1.2.2'

        // utils
        compile 'com.google.guava:guava:19.0'
        compile 'com.google.code.gson:gson:2.6.2'
        compile 'org.apache.commons:commons-lang3:3.4'
        compile 'org.apache.commons:commons-io:1.3.2'

        // logging
        compile('org.slf4j:slf4j-api:1.7.13') { force = true }
        compile('org.slf4j:slf4j-log4j12:1.7.13') { force = true }
        compile('org.slf4j:jcl-over-slf4j:1.7.13') { force = true }
        runtime('log4j:log4j:1.2.17') { force = true }

        // test
        testCompile "org.jetbrains.kotlin:kotlin-test:1.0.1"
        testCompile 'junit:junit:4.12'
    }

    // Remove unwanted logger implementation from all transitive dependencies
    configurations.all.collect {
        it.exclude group: 'commons-logging'
        it.exclude group: 'ch.qos.logback'
    }

    task 'create-dirs' << {
        description = 'Initializes directory structure according to source sets'
        sourceSets.all { set ->
            set.allSource.srcDirs.each { it.mkdirs() }
        }
    }

}

// Common =======================================================================================

project(":common") {
    apply plugin: 'com.google.protobuf'

    description = "[lib] Common jarvis specific codebase."

    dependencies {
        compile project(":util")
    }

    protobuf {
        generatedFilesBaseDir = "${projectDir}/src/gen"

        plugins {
            grpc {
                artifact = 'io.grpc:protoc-gen-grpc-java:0.13.2'
            }
        }

        protoc {
            artifact = "com.google.protobuf:protoc:3.0.0-beta-2"
        }

        generateProtoTasks {
            all().each { task ->
                task.plugins {
                    grpc {}
                }

                if (task.name.equals("generateProto")) {
                    task.outputs.upToDateWhen {
                        new File(generatedFilesBaseDir).exists()
                    }
                }
            }

            compileJava.dependsOn(generateProto)
            compileKotlin.dependsOn(generateProto)
        }

        task deleteGeneratedProto << {
            delete generatedFilesBaseDir
        }

        clean.dependsOn(deleteGeneratedProto)
    }

    sourceSets {
        main {
            proto {
                srcDir 'src/main/proto'
            }
            java {
                srcDirs 'src/main/java', 'src/gen/main/java', 'src/gen/main/grpc'
            }
            kotlin {
                srcDirs 'src/main/kotlin'
            }
        }
        test {
            proto {
                srcDir 'src/test/proto'
            }
            java {
                srcDirs 'src/test/java', 'src/gen/test/java', 'src/gen/test/grpc'
            }
            kotlin {
                srcDirs 'src/test/kotlin'
            }
        }
    }
}

// Engine =======================================================================================

project(":engine") {
    apply plugin: 'spring-boot'

    description = "[app] Uses collector services to get realtime exchange data to generate trade signals."
    version = "0.1"

    dependencies {
        compile project(":common")

        compile 'org.springframework.boot:spring-boot-starter'
        compile 'org.springframework.boot:spring-boot-starter-log4j'
        compile 'org.springframework.boot:spring-boot-configuration-processor'
    }
}

// Util =========================================================================================

project(":util") {

    description = "[lib] Global utilities for java/kotlin development (not jarvis specific)."

    // For now we push all dependencies to global project (will split them later)
    dependencies {

        // persistance
        compile 'net.openhft:chronicle:3.6.0'

        // email
        compile 'net.sargue:mailgun:1.0.0'

//        compile 'net.openhft:saxophone-sandbox:1.0.4'

        // http
        compile 'org.apache.httpcomponents:httpclient:4.5.1'
        compile 'org.apache.httpcomponents:fluent-hc:4.5.1'
        compile 'org.apache.httpcomponents:httpasyncclient:4.0'

        // websocket
        compile 'javax.websocket:javax.websocket-api:1.0'
        compile 'org.eclipse.jetty.websocket:javax-websocket-client-impl:9.2.7.v20150116'
        compile 'org.eclipse.jetty.websocket:javax-websocket-server-impl:9.2.7.v20150116'

        // wamp
        compile 'org.javassist:javassist:3.20.0-GA'
        compile 'ws.wamp.jawampa:jawampa-netty:0.4.1'

        // pusher
        compile 'com.pusher:pusher-java-client:1.0.0'
    }
}

// Bitfinex =====================================================================================

project(":bitfinex") {
    apply plugin: 'spring-boot'

    description = "[app] Bitfinex Collector service collects and stores historical data for trades and orders."
    version = "0.1"

    dependencies {
        compile project(":common")

        compile 'org.springframework.boot:spring-boot-starter'
        compile 'org.springframework.boot:spring-boot-starter-log4j'
        compile 'org.springframework.boot:spring-boot-configuration-processor'
    }
}



task wrapper(type: Wrapper) {
    description = 'Regenerates the Gradle wrapper script'
    gradleVersion = '2.12'
}