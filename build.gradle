description = "Fully autonomous algorithmic trading environment."

/**
 * Global build script configurations, these are used to generate,
 * default environment variables in shell scripts. Feel free to
 * adjust to your working environment.
 */
def confRoot = "/Users/vach/workspace/jarvis/dist/conf"
def distRoot = "/Users/vach/workspace/jarvis/dist/bin"
def profile = "dev"

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url 'http://clojars.org/repo' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.2"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.7'
    }
}


// Global =======================================================================================


subprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'idea'

    group = "jarvis" // we don't need the domain

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    repositories {
        mavenCentral()
        mavenLocal()

        maven { url 'http://clojars.org/repo' }
        // open hft snapshots
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }

    dependencies {
        // kotlin
        compile 'org.jetbrains.kotlin:kotlin-stdlib:1.0.2'
        compile "org.jetbrains:annotations:15.0"

        // protobuf
        compile 'com.google.protobuf:protobuf-java:3.0.0-beta-2'
        compile 'com.google.protobuf:protobuf-java-util:3.0.0-beta-2'

        compile 'io.grpc:grpc-all:0.13.2'

        // rx java
        compile 'io.reactivex:rxjava:1.1.3'

        // java 8 stream utils
        compile 'one.util:streamex:0.5.5'

        // functional
        compile 'com.javaslang:javaslang:1.2.2'

        // utils
        compile 'com.google.guava:guava:19.0'
        compile 'com.google.code.gson:gson:2.6.2'
        compile 'org.apache.commons:commons-lang3:3.4'
        compile 'commons-io:commons-io:2.5'
        compile 'org.apache.commons:commons-collections4:4.1'

        // logging
        compile('org.slf4j:slf4j-api:1.7.19') { force = true }
        compile('org.slf4j:slf4j-log4j12:1.7.19') { force = true }
        compile('org.slf4j:jcl-over-slf4j:1.7.19') { force = true }
        compile('org.slf4j:jul-to-slf4j:1.7.21') { force = true }
        runtime('log4j:log4j:1.2.17') { force = true }

        // test
        testCompile "org.jetbrains.kotlin:kotlin-test:1.0.2"
        testCompile 'junit:junit:4.12'
    }

    // Remove unwanted logger implementation from all transitive dependencies
    configurations.all.collect {
        it.exclude group: 'commons-logging'
        it.exclude group: 'ch.qos.logback'
    }

    task 'create-dirs' << {
        description = 'Initializes directory structure according to source sets'
        sourceSets.all { set ->
            set.allSource.srcDirs.each { it.mkdirs() }
        }
    }

    ext {
        /**
         * Configure project for protobuf/grpc compilation
         */
        enableProto = {
            project.apply plugin: 'com.google.protobuf'
            project.protobuf {
                generatedFilesBaseDir = "${projectDir}/src/gen"

                plugins {
                    grpc {
                        artifact = 'io.grpc:protoc-gen-grpc-java:0.13.2'
                    }
                }

                protoc {
                    artifact = "com.google.protobuf:protoc:3.0.0-beta-2"
                }

                generateProtoTasks {
                    all().each { task ->
                        task.plugins {
                            grpc {}
                        }

                        if (task.name.equals("generateProto")) {
                            task.outputs.upToDateWhen {
                                new File(generatedFilesBaseDir).exists()
                            }
                        }
                    }

                    compileJava.dependsOn(generateProto)
                    compileKotlin.dependsOn(generateProto)

                    task deleteGeneratedProto << {
                        delete generatedFilesBaseDir
                    }

                    task recompileProto {}

                    recompileProto.dependsOn(deleteGeneratedProto)
                    recompileProto.dependsOn(generateProto)

                    clean.dependsOn(deleteGeneratedProto)
                }

            }

            project.sourceSets {
                main {
                    proto {
                        srcDir 'src/main/proto'
                    }
                    java {
                        srcDirs 'src/main/java', 'src/gen/main/java', 'src/gen/main/grpc'
                    }
                }
                test {
                    proto {
                        srcDir 'src/test/proto'
                    }
                    java {
                        srcDirs 'src/test/java', 'src/gen/test/java', 'src/gen/test/grpc'
                    }
                }
            }
        }
    }
}


// Util =========================================================================================


project(":util") {

    description = "[lib] Global utilities for java/kotlin development (nothing jarvis specific)."

    // For now we push all dependencies to global project (will split them later)
    dependencies {
        // email
        compile 'net.sargue:mailgun:1.0.0'

        // http
        compile 'org.apache.httpcomponents:httpclient:4.5.1'
        compile 'org.apache.httpcomponents:fluent-hc:4.5.1'
        compile 'org.apache.httpcomponents:httpasyncclient:4.0'

        // websocket
        compile 'javax.websocket:javax.websocket-api:1.0'
        compile 'org.eclipse.jetty.websocket:javax-websocket-client-impl:9.2.7.v20150116'
        compile 'org.eclipse.jetty.websocket:javax-websocket-server-impl:9.2.7.v20150116'

        // wamp
        compile 'org.javassist:javassist:3.20.0-GA'
        compile 'ws.wamp.jawampa:jawampa-netty:0.4.1'

        // pusher
        compile 'com.pusher:pusher-java-client:1.1.3'
    }
}


// Common =======================================================================================


project(":common") {

    description = "[lib] Common jarvis codebase shared across multiple modules."

    dependencies {
        compile project(":util")
    }

    enableProto()
}


// Event Store ==================================================================================

project(":eventstore-tools") {

    description = "[lib] Tools for event stream persistence and processing."

    dependencies {
        compile project(":common")

        // chronicle
        compile 'net.openhft:chronicle-queue:4.3.2'
    }
}

project(":eventstore-client") {

    description = "[lib] Event Store GRPC client."

    dependencies {
        compile project(":common")
    }
}

project(":eventstore-server") {
    apply plugin: 'application'
    mainClassName = "eventstore.server.RunEventStoreKt"

    def destination = "${distRoot}/eventstore"

    applicationDefaultJvmArgs = [
            "-Dconf=${confRoot}/eventstore.json",
            "-DlogPath=${destination}/logs",
            "-Dprofile=${profile}"
    ]

    installDist.destinationDir = file(destination)

    description = "[app] Event Store server."

    dependencies {
        compile project(":eventstore-tools")
    }
}


// User Interface ===============================================================================


project(":visual") {

    description = "[app] Ui which operates with other services."

    /**
     * notes : ui will be composed of static web app which connects to backend endpoint,
     * front end is angular 2 + material design + d3 for charts
     * back end is simple websocket endpoint which will redirect any calls from ui to actual services...
     */

    dependencies {
        compile project(":common")
        compile project(":eventstore-client")
        compile project(":collector-client")
    }
}


// Clients ======================================================================================


project(":client-bitfinex") {
    description = "[lib] Client library to work with Bitfinex exchange."

    dependencies {
        compile project(":common")
    }
}

project(":client-bitstamp") {
    description = "[lib] Client library to work with Bitstamp exchange."

    dependencies {
        compile project(":common")
    }
}

project(":client-btce") {
    description = "[lib] Client library to work with Btce exchange."

    dependencies {
        compile project(":common")
    }
}

project(":client-gdax") {
    description = "[lib] Client library to work with GDAX (Coinbase) exchange."

    dependencies {
        compile project(":common")
    }
}

project(":client-btcc") {
    description = "[lib] Client library to work with BtcChina exchange."

    dependencies {
        compile project(":common")
    }
}


// Collectors ===================================================================================


project(":collector-common") {

    description = "[lib] Common collector functionality that is reused across collectors."

    dependencies {
        compile project(":common")
        compile project(":eventstore-client")
    }
}

project(":collector-client") {

    description = "[lib] Collector client library that allows to connect and work with any collector."

    dependencies {
        compile project(":common")
    }
}

project(":collector-bitfinex") {
    apply plugin: 'application'
    mainClassName = "collector.bitfinex.RunBitfinexCollectorKt"

    def destination = "${distRoot}/bitfinex"

    applicationDefaultJvmArgs = [
            "-Dconf=${confRoot}/collector/bitfinex.json",
            "-DlogPath=${destination}/logs",
            "-Dprofile=${profile}"
    ]

    installDist.destinationDir = file(destination)

    description = "[app] Collects trade and orderbook data for Bitfinex exchange."

    dependencies {
        compile project(":collector-common")
        compile project(":client-bitfinex")
    }
}

project(":collector-bitstamp") {
    apply plugin: 'application'
    mainClassName = "collector.bitstamp.RunBitstampCollectorKt"

    def destination = "${distRoot}/bitstamp"

    applicationDefaultJvmArgs = [
            "-Dconf=${confRoot}/collector/bitstamp.json",
            "-DlogPath=${destination}/logs",
            "-Dprofile=${profile}"
    ]

    installDist.destinationDir = file(destination)

    description = "[app] Collects trade and orderbook data for Bitstamp exchange."

    dependencies {
        compile project(":collector-common")
        compile project(":client-bitstamp")
    }
}

project(":collector-btce") {
    apply plugin: 'application'
    mainClassName = "collector.btce.RunBtceCollectorKt"

    def destination = "${distRoot}/btce"

    applicationDefaultJvmArgs = [
            "-Dconf=${confRoot}/collector/btce.json",
            "-DlogPath=${destination}/logs",
            "-Dprofile=${profile}"
    ]

    installDist.destinationDir = file(destination)

    description = "[app] Collects trade and orderbook data for Btce exchange."

    dependencies {
        compile project(":collector-common")
        compile project(":client-btce")
    }
}


// jarvis


project(":engine") {

    dependencies {
        // event store
        compile project(":eventstore-server")
        compile project(":eventstore-client")

        // collectors
        compile project(":collector-bitfinex")
        compile project(":collector-bitstamp")
        compile project(":collector-btce")
        compile project(":collector-client")
    }
}


// Stuff =======================================================================================


// ./gradlew wrapper --gradle-version=2.13

task wrapper(type: Wrapper) {
    description = 'Regenerates the Gradle wrapper script'
    gradleVersion = '2.13'
}

task cleanOutput() {
    delete distRoot
}